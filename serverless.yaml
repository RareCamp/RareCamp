service: rarecamp${{env:SERVERLESS_SERVICE_SUFFIX, ''}}
provider:
  name: aws
  stackName: ${{self:service}}-${{self:provider.stage}}
  runtime: nodejs12.x
  memorySize: 512
  timeout: 6
  logRetentionInDays: ${{self:custom.stages.${{self:provider.stage}}.logRetentionInDays}}
  stage: ${{opt:stage, env:NODE_ENV, 'development'}}
  profile: ${{self:custom.stageConfig.profile}}
  region: us-west-2
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._@\\'\",\\-\\/\\(\\)]+?)}}"
  logs:
    restApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      level: INFO # TODO: add custom field for setting this; default to ERROR for prod
  environment:
    USER_TABLE: !Ref UserTable

    # Enable connection reuse for AWS SDK for instant performance boost
    # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-appsync-plugin
  # - serverless-apigateway-service-proxy
  # - serverless-plugin-split-stacks
  - serverless-stack-output
  - serverless-cloudside-plugin
  - serverless-plugin-aws-alerts
  # - '../serverless-amplify-plugin'
  - '@wizeline/serverless-amplify-plugin'
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-appsync-simulator
  - serverless-stack-termination-protection

custom:
  stages:
    development:
      profile: ${{env:AWS_PROFILE}}
      logRetentionInDays: 1
      amplify:
      api:
        domainEnabled: false
      alarms:
        notificationEmail: ${{env:ALARMS_NOTIFICATION_EMAIL}}
    staging:
      profile: rarecamp_staging
      logRetentionInDays: 3
      api:
        domainEnabled: false
        domainName: staging.api.example.com
        validationDomain: example.com
      amplify:
        # domainName: staging.example.com
        # branch: staging
      alarms:
        notificationEmail: alert@example.com
    production:
      profile: rarecamp_prod
      logRetentionInDays: 14
      api:
        domainEnabled: false
        domainName: api.example.com
        validationDomain: example.com
      amplify:
        # domainName: example.com
      alarms:
        notificationEmail: alert@example.com
  stageConfig: ${{self:custom.stages.${{self:provider.stage}}}}
  prune:
    automatic: true
    number: 10
  customDomain:
    domainName: ${{self:custom.stageConfig.api.domainName, ''}}
    certificateName: ${{self:custom.stageConfig.api.domainName, ''}}
    enabled: ${{self:custom.stageConfig.api.domainEnabled, false}}
    # createRoute53Record: ${{self:custom.stageConfig.api.isDomainRoute53, false}}
  serverless-offline:
    httpPort: 4911
    noPrependStageInUrl: true
    useChildProcesses: true # hack to get watching working
    useSeparateProcesses: true
  amplify:
    isManual: true
    domainName: ${{self:custom.stageConfig.amplify.domainName, ''}}
    buildSpecValues:
      artifactBaseDirectory: packages/ui/.next
      preBuildWorkingDirectory: packages/ui
    buildCommandEnvVars:
      prefix: 'REACT_APP_'
      allow:
        - ApiEndpoint
        - CognitoIdentityPoolId,
        - CognitoUserPoolId,
        - CognitoUserPoolClientId,
  webpack:
    webpackConfig: ./functions.webpack.config.js
  output:
    file: ./stack-outputs.json
  # TODO: Add custom splitting with ./split-stack-splitter.js
  # splitStacks:
  #   perFunction: true
  #   custom: ./split-stack-splitter.js
  alerts:
    dashboards: true
    nameTemplate: $[functionName]-$[metricName]-Alarm
    topics:
      alarm:
        topic: ${{self:service}}-${{self:provider.stage}}-alarm
        notifications:
          - protocol: email
            endpoint: ${{self:custom.stageConfig.alarms.notificationEmail}}
    # TODO: Add short and long alarms for each
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
  serverlessTerminationProtection:
    stages:
      - staging
      - production
  dynamodb:
    stages:
      - development
    start:
      dbPath: '.dynamodb'
      migrate: false
  appSync: ${{file(templates/graphql.yml)}}

functions: ${{file(templates/functions.yml)}}
    
resources:
  - ${{file(templates/resources.yml)}}
  - ${{file(templates/dynamodb.yml)}}
